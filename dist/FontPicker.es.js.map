{"version":3,"file":"FontPicker.es.js","sources":["../src/FontPicker.tsx"],"sourcesContent":["import {\n\tCategory,\n\tFont,\n\tFONT_FAMILY_DEFAULT,\n\tFontManager,\n\tOptions,\n\tOPTIONS_DEFAULTS,\n\tScript,\n\tSortOption,\n\tVariant,\n} from \"@samuelmeuli/font-manager\";\nimport React, { KeyboardEvent, PureComponent, ReactElement } from \"react\";\n\ntype LoadingStatus = \"loading\" | \"finished\" | \"error\";\n\ninterface Props {\n\t// Required props\n\tapiKey: string;\n\n\t// Optional props\n\tactiveFontFamily: string;\n\tonChange: (font: Font) => void;\n\tpickerId: string;\n\tfamilies: string[];\n\tcategories: Category[];\n\tscripts: Script[];\n\tvariants: Variant[];\n\tfilter: (font: Font) => boolean;\n\tlimit: number;\n\tsort: SortOption;\n}\n\ninterface State {\n\texpanded: boolean;\n\tloadingStatus: LoadingStatus;\n}\n\n/**\n * Return the fontId based on the provided font family\n */\nfunction getFontId(fontFamily: string): string {\n\treturn fontFamily.replace(/\\s+/g, \"-\").toLowerCase();\n}\n\nexport default class FontPicker extends PureComponent<Props, State> {\n\t// Instance of the FontManager class used for managing, downloading and applying fonts\n\tfontManager: FontManager;\n\n\tstatic defaultProps = {\n\t\tactiveFontFamily: FONT_FAMILY_DEFAULT,\n\t\tonChange: (): void => {}, // eslint-disable-line @typescript-eslint/no-empty-function\n\t\tpickerId: OPTIONS_DEFAULTS.pickerId,\n\t\tfamilies: OPTIONS_DEFAULTS.families,\n\t\tcategories: OPTIONS_DEFAULTS.categories,\n\t\tscripts: OPTIONS_DEFAULTS.scripts,\n\t\tvariants: OPTIONS_DEFAULTS.variants,\n\t\tfilter: OPTIONS_DEFAULTS.filter,\n\t\tlimit: OPTIONS_DEFAULTS.limit,\n\t\tsort: OPTIONS_DEFAULTS.sort,\n\t};\n\n\tstate: Readonly<State> = {\n\t\texpanded: false,\n\t\tloadingStatus: \"loading\",\n\t};\n\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\n\t\tconst {\n\t\t\tapiKey,\n\t\t\tactiveFontFamily,\n\t\t\tpickerId,\n\t\t\tfamilies,\n\t\t\tcategories,\n\t\t\tscripts,\n\t\t\tvariants,\n\t\t\tfilter,\n\t\t\tlimit,\n\t\t\tsort,\n\t\t\tonChange,\n\t\t} = this.props;\n\n\t\tconst options: Options = {\n\t\t\tpickerId,\n\t\t\tfamilies,\n\t\t\tcategories,\n\t\t\tscripts,\n\t\t\tvariants,\n\t\t\tfilter,\n\t\t\tlimit,\n\t\t\tsort,\n\t\t};\n\n\t\t// Initialize FontManager object\n\t\tthis.fontManager = new FontManager(apiKey, activeFontFamily, options, onChange);\n\t}\n\n\tcomponentDidMount = (): void => {\n\t\t// Generate font list\n\t\tthis.fontManager\n\t\t\t.init()\n\t\t\t.then((): void => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tloadingStatus: \"finished\",\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err: Error): void => {\n\t\t\t\t// On error: Log error message\n\t\t\t\tthis.setState({\n\t\t\t\t\tloadingStatus: \"error\",\n\t\t\t\t});\n\t\t\t\tconsole.error(\"Error trying to fetch the list of available fonts\");\n\t\t\t\tconsole.error(err);\n\t\t\t});\n\t};\n\n\t/**\n\t * After every component update, check whether the activeFontFamily prop has changed. If so,\n\t * call this.setActiveFontFamily with the new font\n\t */\n\tcomponentDidUpdate = (prevProps: Props): void => {\n\t\tconst { activeFontFamily, onChange } = this.props;\n\n\t\t// If active font prop has changed: Update font family in font manager and component state\n\t\tif (activeFontFamily !== prevProps.activeFontFamily) {\n\t\t\tthis.setActiveFontFamily(activeFontFamily);\n\t\t}\n\n\t\t// If onChange prop has changed: Update onChange function in font manager\n\t\tif (onChange !== prevProps.onChange) {\n\t\t\tthis.fontManager.setOnChange(onChange);\n\t\t}\n\t};\n\n\t/**\n\t * EventListener for closing the font picker when clicking anywhere outside it\n\t */\n\tonClose = (e: MouseEvent): void => {\n\t\tlet targetEl = e.target as Node; // Clicked element\n\t\tconst fontPickerEl = document.getElementById(`font-picker${this.fontManager.selectorSuffix}`);\n\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tif (targetEl === fontPickerEl) {\n\t\t\t\t// Click inside font picker: Exit\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (targetEl.parentNode) {\n\t\t\t\t// Click outside font picker: Move up the DOM\n\t\t\t\ttargetEl = targetEl.parentNode;\n\t\t\t} else {\n\t\t\t\t// DOM root is reached: Toggle picker, exit\n\t\t\t\tthis.toggleExpanded();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Update the active font on font button click\n\t */\n\tonSelection = (e: React.MouseEvent | KeyboardEvent): void => {\n\t\tconst target = e.target as HTMLButtonElement;\n\t\tconst activeFontFamily = target.textContent;\n\t\tif (!activeFontFamily) {\n\t\t\tthrow Error(`Missing font family in clicked font button`);\n\t\t}\n\t\tthis.setActiveFontFamily(activeFontFamily);\n\t\tthis.toggleExpanded();\n\t};\n\n\t/**\n\t * Set the specified font as the active font in the fontManager and update activeFontFamily in the\n\t * state\n\t */\n\tsetActiveFontFamily = (activeFontFamily: string): void => {\n\t\tthis.fontManager.setActiveFont(activeFontFamily);\n\t};\n\n\t/**\n\t * Generate <ul> with all font families\n\t */\n\tgenerateFontList = (fonts: Font[]): ReactElement => {\n\t\tconst { activeFontFamily } = this.props;\n\t\tconst { loadingStatus } = this.state;\n\n\t\tif (loadingStatus !== \"finished\") {\n\t\t\treturn <div />;\n\t\t}\n\t\treturn (\n\t\t\t<ul className=\"font-list\">\n\t\t\t\t{fonts.map(\n\t\t\t\t\t(font): ReactElement => {\n\t\t\t\t\t\tconst isActive = font.family === activeFontFamily;\n\t\t\t\t\t\tconst fontId = getFontId(font.family);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={fontId} className=\"font-list-item\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tid={`font-button-${fontId}${this.fontManager.selectorSuffix}`}\n\t\t\t\t\t\t\t\t\tclassName={`font-button ${isActive ? \"active-font\" : \"\"}`}\n\t\t\t\t\t\t\t\t\tonClick={this.onSelection}\n\t\t\t\t\t\t\t\t\tonKeyPress={this.onSelection}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{font.family}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t);\n\t};\n\n\t/**\n\t * Expand/collapse the picker's font list\n\t */\n\ttoggleExpanded = (): void => {\n\t\tconst { expanded } = this.state;\n\n\t\tif (expanded) {\n\t\t\tthis.setState({\n\t\t\t\texpanded: false,\n\t\t\t});\n\t\t\tdocument.removeEventListener(\"click\", this.onClose);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\texpanded: true,\n\t\t\t});\n\t\t\tdocument.addEventListener(\"click\", this.onClose);\n\t\t}\n\t};\n\n\trender = (): ReactElement => {\n\t\tconst { activeFontFamily, sort } = this.props;\n\t\tconst { expanded, loadingStatus } = this.state;\n\n\t\t// Extract and sort font list\n\t\tconst fonts = Array.from(this.fontManager.getFonts().values());\n\t\tif (sort === \"alphabet\") {\n\t\t\tfonts.sort((font1: Font, font2: Font): number => font1.family.localeCompare(font2.family));\n\t\t}\n\n\t\t// Render font picker button and attach font list to it\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`font-picker${this.fontManager.selectorSuffix}`}\n\t\t\t\tclassName={expanded ? \"expanded\" : \"\"}\n\t\t\t>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName=\"dropdown-button\"\n\t\t\t\t\tonClick={this.toggleExpanded}\n\t\t\t\t\tonKeyPress={this.toggleExpanded}\n\t\t\t\t>\n\t\t\t\t\t<p className=\"dropdown-font-family\">{activeFontFamily}</p>\n\t\t\t\t\t<p className={`dropdown-icon ${loadingStatus}`} />\n\t\t\t\t</button>\n\t\t\t\t{loadingStatus === \"finished\" && this.generateFontList(fonts)}\n\t\t\t</div>\n\t\t);\n\t};\n}\n"],"names":[],"mappings":"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"}